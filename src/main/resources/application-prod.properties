# ---tomcat---
server.port=8889
server.tomcat.uri-encoding=UTF-8

# 设置视图的前缀和后缀
spring.mvc.view.prefix=/templates/
spring.mvc.view.suffix=.html

# 页面缓存
spring.thymeleaf.cache=false
# 编码
spring.thymeleaf.encoding=UTF-8

# ---\u6570\u636E\u5E93---
spring.jpa.database=MYSQL
spring.jpa.databasePlatform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.url=jdbc:mysql://123.123.123.123:3306/iim?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driverClassName=com.mysql.jdbc.Driver

### \u6570\u636E\u5E93\u8FDE\u63A5\u6C60\u4FE1\u606F ###
spring.datasource.initialSize=3
spring.datasource.minIdle=1
spring.datasource.maxActive=5
# \u914D\u7F6E\u83B7\u53D6\u8FDE\u63A5\u7B49\u5F85\u8D85\u65F6\u7684\u65F6\u95F4
spring.datasource.maxWait=10000
# \u68C0\u9A8C\u8FDE\u63A5\u662F\u5426\u6709\u6548\u7684\u67E5\u8BE2\u8BED\u53E5\u3002\u5982\u679C\u6570\u636E\u5E93Driver\u652F\u6301ping()\u65B9\u6CD5\uFF0C\u5219\u4F18\u5148\u4F7F\u7528ping()\u65B9\u6CD5\u8FDB\u884C\u68C0\u67E5\uFF0C\u5426\u5219\u4F7F\u7528validationQuery\u67E5\u8BE2\u8FDB\u884C\u68C0\u67E5\u3002(Oracle jdbc Driver\u76EE\u524D\u4E0D\u652F\u6301ping\u65B9\u6CD5)
spring.datasource.validationQuery=SELECT 1 FROM DUAL
# \u8BBE\u7F6E\u4ECE\u8FDE\u63A5\u6C60\u83B7\u53D6\u8FDE\u63A5\u65F6\u662F\u5426\u68C0\u67E5\u8FDE\u63A5\u6709\u6548\u6027\uFF0Ctrue\u65F6\uFF0C\u6BCF\u6B21\u90FD\u68C0\u67E5;false\u65F6\uFF0C\u4E0D\u68C0\u67E5
spring.datasource.testOnBorrow=false
# \u8BBE\u7F6E\u5F80\u8FDE\u63A5\u6C60\u5F52\u8FD8\u8FDE\u63A5\u65F6\u662F\u5426\u68C0\u67E5\u8FDE\u63A5\u6709\u6548\u6027\uFF0Ctrue\u65F6\uFF0C\u6BCF\u6B21\u90FD\u68C0\u67E5;false\u65F6\uFF0C\u4E0D\u68C0\u67E5
spring.datasource.testOnReturn=false
# \u8BBE\u7F6E\u4ECE\u8FDE\u63A5\u6C60\u83B7\u53D6\u8FDE\u63A5\u65F6\u662F\u5426\u68C0\u67E5\u8FDE\u63A5\u6709\u6548\u6027\uFF0Ctrue\u65F6\uFF0C\u5982\u679C\u8FDE\u63A5\u7A7A\u95F2\u65F6\u95F4\u8D85\u8FC7minEvictableIdleTimeMillis\u8FDB\u884C\u68C0\u67E5\uFF0C\u5426\u5219\u4E0D\u68C0\u67E5;false\u65F6\uFF0C\u4E0D\u68C0\u67E5
spring.datasource.testWhileIdle=true
# \u914D\u7F6E\u4E00\u4E2A\u8FDE\u63A5\u5728\u6C60\u4E2D\u6700\u5927\u7A7A\u95F2\u65F6\u95F4\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2\uFF085*60*1000=600000,5\u5206\u949F\uFF09
spring.datasource.minEvictableIdleTimeMillis=300000
#  \u914D\u7F6E\u95F4\u9694\u591A\u4E45\u624D\u8FDB\u884C\u4E00\u6B21\u68C0\u6D4B\uFF0C\u68C0\u6D4B\u9700\u8981\u5173\u95ED\u7684\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2
# \u68C0\u6D4B\u65F6:1.\u5982\u679C\u8FDE\u63A5\u7A7A\u95F2\u5E76\u4E14\u8D85\u8FC7minIdle\u4EE5\u5916\u7684\u8FDE\u63A5\uFF0C\u5982\u679C\u7A7A\u95F2\u65F6\u95F4\u8D85\u8FC7minEvictableIdleTimeMillis\u8BBE\u7F6E\u7684\u503C\u5219\u76F4\u63A5\u7269\u7406\u5173\u95ED\u30022.\u5728minIdle\u4EE5\u5185\u7684\u4E0D\u5904\u7406\u3002\uFF081*60*1000=600000,1\u5206\u949F\uFF09
spring.datasource.timeBetweenEvictionRunsMillis=60000
# \u8FDE\u63A5\u6CC4\u9732\u68C0\u67E5\uFF0C\u6253\u5F00removeAbandoned\u529F\u80FD , \u8FDE\u63A5\u4ECE\u8FDE\u63A5\u6C60\u501F\u51FA\u540E\uFF0C\u957F\u65F6\u95F4\u4E0D\u5F52\u8FD8\uFF0C\u5C06\u89E6\u53D1\u5F3A\u5236\u56DE\u8FDE\u63A5\u3002
# \u56DE\u6536\u5468\u671F\u968FtimeBetweenEvictionRunsMillis\u8FDB\u884C\uFF0C\u5982\u679C\u8FDE\u63A5\u4E3A\u4ECE\u8FDE\u63A5\u6C60\u501F\u51FA\u72B6\u6001\uFF0C\u5E76\u4E14\u672A\u6267\u884C\u4EFB\u4F55sql\uFF0C\u5E76\u4E14\u4ECE\u501F\u51FA\u65F6\u95F4\u8D77\u5DF2\u8D85\u8FC7removeAbandonedTimeout\u65F6\u95F4\uFF0C\u5219\u5F3A\u5236\u5F52\u8FD8\u8FDE\u63A5\u5230\u8FDE\u63A5\u6C60\u4E2D\u3002
spring.datasource.removeAbandoned=true
# \u8D85\u65F6\u65F6\u95F4\uFF0C\u5355\u4F4D\u4E3A\u79D2
spring.datasource.removeAbandonedTimeout=1800
# \u6253\u5F00PSCache\uFF0C\u5E76\u4E14\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0F
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=60
# \u5173\u95EDabanded\u8FDE\u63A5\u65F6\u8F93\u51FA\u9519\u8BEF\u65E5\u5FD7\uFF0C\u8FD9\u6837\u51FA\u73B0\u8FDE\u63A5\u6CC4\u9732\u65F6\u53EF\u4EE5\u901A\u8FC7\u9519\u8BEF\u65E5\u5FD7\u5B9A\u4F4D\u5FD8\u8BB0\u5173\u95ED\u8FDE\u63A5\u7684\u4F4D\u7F6E
spring.datasource.logAbandoned=true
# \u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF0C\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF0C'wall'\u7528\u4E8E\u9632\u706B\u5899
spring.datasource.filters=stat,wall,log4j

# 上传文件总的最大值
spring.servlet.multipart.max-request-size=10MB
# 单个文件的最大值
spring.servlet.multipart.max-file-size=10MB

# 多个用逗号分隔（警告，在后期的改版中，这个参数已不推荐传多个）
spring.ftp.ftpHost=123.123.123.123
# 多个用逗号分隔（警告，在后期的改版中，这个参数已不推荐传多个）
spring.ftp.ftpPort=21
# ftp用户名
spring.ftp.ftpUserName=root
# ftp密码
spring.ftp.ftpPassword=123456

# 本目录会在用户的文件夹下新建(nginx路径映射配置时，含本名称的路径，应该都是资源请求)
spring.ftp.ftpPath=fileinfos
# 内网访问资源端口
spring.ftp.ftpPath.port=80

# 是ftp存储还是用本地存储(0-ftp 1-local)
upload.mode=1
# 本地文件存储路径
upload.path=fileinfos/

# 外网访问资源域名
fileDomainName=123.123.123.123
# 外网访问资源端口
fileDomainNamePort=80

spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${upload.path}